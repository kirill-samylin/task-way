const start = document.querySelector('.start');
const mgsParagraph = document.querySelector('.mgs');
const msgRoute = document.querySelector('.route');
function isNaN(number) {
  return typeof number==="number";
};

function answerRoute(route) {
  let text = '';
  route.forEach((line) => {
    text+= JSON.stringify(line).replace(/"/g, "") + "\n";
  });
  msgRoute.textContent = text;
};

function mgs(str) {
  mgsParagraph.textContent = str;
};

function steps(arr){
  let wayArr = [];
  let sumWay = [];
  let copyArr = [];

  function rightObj(line) {
    return {  
      position: arr[line.positionDown]?.[line.positionRight+1], 
      positionDown: line.positionDown,
      positionRight: line.positionRight+1,
      down: (isNaN(arr[line.positionDown+1]?.[line.positionRight+1])) ? (arr[line.positionDown+1]?.[line.positionRight+1]) : false,
      right: (isNaN(arr[line.positionDown]?.[line.positionRight+2])) ? (arr[line.positionDown]?.[line.positionRight+2]) : false,
    };
  };
  function downObj(line) {
    return {
      position: arr[line.positionDown+1]?.[line.positionRight], 
      positionDown: line.positionDown+1,
      positionRight: line.positionRight,
      down: (isNaN(arr[line.positionDown+2]?.[line.positionRight])) ? (arr[line.positionDown+2]?.[line.positionRight]) : false,
      right: (isNaN(arr[line.positionDown+1]?.[line.positionRight+1])) ? (arr[line.positionDown+1]?.[line.positionRight+1]) : false,
    };
  };

  function goWay(line, pos) {
    let right = [];
    let down = [];
    if (isNaN(line.down) && isNaN(line.right)) {
      right = copyArr[pos].concat();
      down = copyArr[pos].concat();
      right.push(rightObj(line)); 
      down.push(downObj(line));      
      copyArr[pos] = right;  
      copyArr.push(down);  
    };
    if (!isNaN(line.down) && isNaN(line.right)) { 
      right = copyArr[pos].concat();
      right.push(rightObj(line));
      copyArr[pos] = right;
    };
    if (isNaN(line.down) && !isNaN(line.right)) {
        down = copyArr[pos].concat();
        down.push(downObj(line));
        copyArr[pos] = down;
    };
  };

  arr.forEach((steps, index) => {
    steps.forEach((step, i) => {
      if (isNaN(arr[index]?.[i])) {
        wayArr.push({
          position: step, 
          positionDown: index,
          positionRight: i,
          down: (isNaN(arr[index+1]?.[i])) ? (arr[index+1]?.[i]) : false,
          right: (isNaN(arr[index]?.[i+1])) ? (arr[index]?.[i+1]) : false,
        });
      };
    });
  });

  wayArr.forEach((line) => {
    if (sumWay.length===0) {
      let right = [];
      let down = [];
      if (isNaN(line.down)) {
        down.push(line);
        down.push(downObj(line));
        sumWay.push(down);
      };
      if (isNaN(line.right)) {
        right.push(line);
        right.push(rightObj(line));
        sumWay.push(right);
      };
    } else {
      copyArr = sumWay.concat();
      for (let i=0; i<sumWay.length; i++) {
        if (sumWay[i].some((obj) => (obj.positionDown === line.positionDown && obj.positionRight === line.positionRight))) { 
            goWay(line, i);
        }; 
      };  
      sumWay = copyArr;
    };
  });

  sumWay.forEach((arr, index) => {
    sumWay[index].sum = arr.reduce((cost, item) => (cost+item.position), 0);
  });
  
  const cheapWay = sumWay.sort((a, b) => (a.sum - b.sum))[0];
  const route = [];
  arr.forEach((array, positionDown) => {
    const routeSteps = [];
    array.forEach((item, positionRight) => {
      const step = cheapWay.find((obj) => (obj.positionDown===positionDown && obj.positionRight===positionRight))?.position ?? '*';
      routeSteps.push(step);
    });
    route.push(routeSteps);
  });
  answerRoute(route);
  mgs(' '+ cheapWay.sum);
};
function checkArray(array) {
  if (array.length>20 || array.length===0)  {
    mgs('Ошибка! На вход подается матрица размерностью N x M (1<=N<=20, 1<=M<=20).');
    return;
  } else {
    function checksCharacters(numbers) {
      return numbers.every((number) => number>=0 && number<=100);
    }
    if (array.every((arr) => (Array.isArray(arr) && checksCharacters(arr)))) {
      steps(array);
    } else {
      mgs('Ошибка! На вход подается матрица размерностью N x M (1<=N<=20, 1<=M<=20) из цифр от 0 до 100');
    }
  }
};
function checkInput() { 
  const inputText = document.querySelector('.arr');
  try {
    const inputArray = inputText.value;
    checkArray(JSON.parse(inputArray));
  } catch (e) {
      if (e instanceof SyntaxError) {
        mgs('Ошибка! Введите массив!');
      } else {
        mgs('Ошибка! Введите массив!');
      }
  };
};

start.addEventListener('click', checkInput);